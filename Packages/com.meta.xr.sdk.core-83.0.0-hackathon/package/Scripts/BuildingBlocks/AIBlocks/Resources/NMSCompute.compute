/*
* Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * Licensed under the Oculus SDK License Agreement (the "License");
 * you may not use the Oculus SDK except in compliance with the License,
 * which is provided at the time of installation or download, or which
 * otherwise accompanies this software in either electronic or hard copy form.
 *
 * You may obtain a copy of the License at
 *
 * https://developer.oculus.com/licenses/oculussdk/
 *
 * Unless required by applicable law or agreed to in writing, the Oculus SDK
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma kernel CSMain

StructuredBuffer<float4> boxes; // xywh
StructuredBuffer<float> scores;
RWStructuredBuffer<int> keep; // 1 = keep, 0 = suppress

int numBoxes;
float iouThreshold;

// Helper: IoU must be declared before use
float IoU(float4 a, float4 b) {
  float2 aMin = a.xy - a.zw * 0.5;
  float2 aMax = a.xy + a.zw * 0.5;
  float2 bMin = b.xy - b.zw * 0.5;
  float2 bMax = b.xy + b.zw * 0.5;

  float2 interMin = max(aMin, bMin);
  float2 interMax = min(aMax, bMax);
  float2 interSize = max(interMax - interMin, 0);

  float interArea = interSize.x * interSize.y;
  float areaA = a.z * a.w;
  float areaB = b.z * b.w;

  return interArea / (areaA + areaB - interArea + 1e-6); // avoid div by zero
}

// Kernel
[numthreads(64, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID) {
  if (id >= numBoxes)
    return;

  float4 b1 = boxes[id];
  float s1 = scores[id];

  // Default: keep the box
  int keepFlag = 1;

  for (uint j = 0; j < numBoxes; j++) {
    if (j == id)
      continue;

    float4 b2 = boxes[j];
    float s2 = scores[j];

    if (s2 > s1) {
      float inter = IoU(b1, b2);
      if (inter > iouThreshold) {
        keepFlag = 0;
        break;
      }
    }
  }

  keep[id] = keepFlag;
}
